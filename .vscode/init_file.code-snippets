{
	// Place your -24K0009-Rafay-Siddiqui workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }


	"setter":{
		"scope": "cpp",
		"prefix": "set",
		"body": ["",
				  "void set_$1($2) {",
				  "         $1 = $2;",
				  "    }",
				],
		"description": "setter in cpp"
	},
	"getter":{
		"scope": "cpp",
		"prefix": "get",
		"body": ["",
				  "$1 get_$2() const {",
				  "        return $2;",
				  "    }",
				  "",
				],
		"description": "getter in cpp"
	},
	"cpp input":{
		"scope": "cpp",
		"prefix":"input",
		"body":[
		"cout<<\"$1: \";cin>>$2;"
		],
		"description": "take user input"
	},
	"swap" :{
		"scope": "cpp",
		"prefix": "swapFunc",
		"body": [
			"template <typename T>",
			"void swap(T& a, T& b){",
			"    T temp = a;",
			"    a=b;",
			"    b=temp;",
			"}",
		]
	},
	"print arr":{
		"scope": "cpp",
		"prefix": "printArr",
		"body": [
			"template <typename T>",
			"void printArr(T arr[], int size){",
			"   for (size_t i = 0; i < size; i++){",
			"       std::cout << arr[i]<< \" \";",
			"   }",
			"   cout<<endl;",
			"}",
		]
	},
	"init_cpp":{
		"scope": "cpp",
		"prefix": "init",
		"body": ["/*",
				  "",
				  "$1",
				  "",
				  "* Name:         Rafay Siddiqui",
				  "* roll number:  24k-0009",
				  "* section:      BAI-3A",
				  "",
				  "",
				  "*/",
				  "",
				  "#include <iostream>",
				  "",
				  "using namespace std;",
				  "",
				  "",
				  "$2",
				  "",
				  "",
				  "int main(){",
				  "",
				  "$3",
				  "",
				  "",
				  "    return 0;",
				  "}",
				],
		"description": "initialize a file in cpp"
	},
	"main_cpp":{
		"scope": "cpp",
		"prefix": "main",
		"body": [
				  "",
				  "int main(){",
				  "",
				  "$3",
				  "",
				  "",
				  "    return 0;",
				  "}",
				],
		"description": "initialize a file in cpp"
	},
	"header":{
		"scope": "cpp",
		"prefix": "header_init",
		"body": [
				  "// \"guard conditions\"",
				  "#ifndef $1",
				  "#define $1 :",
				  "",
				  "",
				  "",
				  "",
				  "#endif",

				],
		"description": "initialize a file in cpp"
	},
	"iostream":{
		"scope": "cpp",
		"prefix": "iostream",
		"body": [
				  "#include <iostream>",
				  "using namespace std;",
				  "",

				],
		"description": "initialize a file in cpp"
	},
	"cp-extension": {
		  "prefix": ["cpp-cp"],
		  "body": ["#include <bits/stdc++.h>",
				   "using namespace std;",
				   "#define ll long long",
				   "#define mod 1000000007\nvoid solve()",
				   "{",
				   	"\t$2",
				   "}",
				   "int main() {\n\tios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);\n#ifndef ONLINE_JUDGE",
				   "\tfreopen(\"input.txt\", \"r\", stdin);",
				   "\tfreopen(\"output.txt\", \"w\", stdout);",
				   "#endif\n\n\tll test=1;\n//$1cin>>test;\n\twhile(test--)\n\t{\n\t\tsolve();\n\t}\n\treturn 0;\n}\n"
		  ],
		  "description": "Default cpp code for CP"
		},
			"for": {
				"prefix": "for",
				"body": [
					"for (${size_t} ${i} = ${1:0}; ${i} < ${2:length}; ${i}++)",
					"{",
					"$3",
					"}"
				],
				"description": "Code snippet for 'for' loop"
			},
			"forr": {
				"prefix": "forr",
				"body": [
					"for (int ${i} = ${1:length} - 1; ${i} >= ${2:0}; ${i}--)",
					"{",
					"$3",
					"}"
				],
				"description": "Code snippet for reverse 'for' loop"
			},
			"do": {
				"prefix": "do",
				"body": [
					"do",
					"{",
					"$1",
					"} while($2);"
				],
				"description": "Code snippet for do...while loop"
			},
			"while": {
				"prefix": "while",
				"body": [
					"while ($1)",
					"{",
					"$2",
					"}"
				],
				"description": "Code snippet for while loop"
			},
			"foreach": {
				"prefix": "foreach",
				"body": [
					"for(auto ${var} : ${collection_to_loop})",
					"{",
					"$1",
					"}"
				],
				"description": "Code snippet for range-based for loop (c++11) statement"
			},
			"if": {
				"prefix": "if",
				"body": [
					"if ($1)",
					"{",
					"$2",
					"}"
				],
				"description": "Code snippet for if statement"
			},
			"else": {
				"prefix": "else",
				"body": [
					"else",
					"{",
					"$1",
					"}"
				],
				"description": "Code snippet for else statement"
			},
			"else if": {
				"prefix": "else if",
				"body": [
					"else if ($1)",
					"{",
					"$2",
					"}"
				],
				"description": "Code snippet for else-if statement"
			},
			"enum": {
				"prefix": "enum",
				"body": [
					"enum ${MyEnum}",
					"{",
					"$1",
					"};"
				],
				"description": "Code snippet for enum"
			},
			"enum class": {
				"prefix": "enum class",
				"body": [
					"enum class ${MyClass} { };"
				],
				"description": "Code snippet for enum class (c++11)"
			},
			"class": {
				"prefix": "class",
				"body": [
					"class $1",
					"{",
					"private:",
					"$2",
					"public:",
					"$1();",
					"$1($1& ) {",
					"",
					"}",
					"~$1();",
					"",
					"};",
					"",
					"$1::$1()",
					"{",
					"}",
					"",
					"$1::~$1()",
					"{",
					"}",
					"",
					"///////////////////////////////////////////////////////",
				],
				"description": "Code snippet for class"
			},
			"classi": {
				"prefix": "classi",
				"body": [
					"class ${MyClass}",
					"{",
					"public:",
					"${MyClass}() = default;",
					"${MyClass}(${MyClass} &&) = default;",
					"${MyClass}(const ${MyClass} &) = default;",
					"${MyClass} &operator=(${MyClass} &&) = default;",
					"${MyClass} &operator=(const ${MyClass} &) = default;",
					"~${MyClass}() = default;",
					"",
					"private:",
					"$1",
					"};"
				],
				"description": "Code snippet for class with inline constructor/destructor"
			},
			"interface": {
				"prefix": "interface",
				"body": [
					"__interface I${Interface}",
					"{",
					"$1",
					"};"
				],
				"description": "Code snippet for interface (Visual C++)"
			},
			"namespace": {
				"prefix": "namespace",
				"body": [
					"namespace ${MyNamespace}",
					"{",
					"$1",
					"}"
				],
				"description": "Code snippet for namespace"
			},
			"#ifdef": {
				"prefix": "#ifdef",
				"body": [
					"#ifdef ${DEBUG}",
					"$1",
					"#endif // ${DEBUG}"
				],
				"description": "Code snippet for #ifdef"
			},
			"#ifndef": {
				"prefix": "#ifndef",
				"body": [
					"#ifndef ${1:1}",
					"$2",
					"#endif // !$1"
				],
				"description": "Code snippet for #ifndef"
			},
			"#if": {
				"prefix": "#if",
				"body": [
					"#ifdef ${1:0}",
					"$2",
					"#endif // $1"
				],
				"description": "Code snippet for #if"
			},
			"struct": {
				"prefix": "struct",
				"body": [
					"struct ${MyStruct}",
					"{",
					"$1",
					"};"
				],
				"description": "Code snippet for struct"
			},
			"switch": {
				"prefix": "switch",
				"body": [
					"switch (${switch_on})",
					"{",
					"default:",
					"break;$1",
					"}"
				],
				"description": "Code snippet for switch statement"
			},
			"try": {
				"prefix": "try",
				"body": [
					"try",
					"{",
					"",
					"}",
					"catch (const std::exception&)",
					"{",
					"$1",
					"}"
				],
				"description": "Code snippet for try catch"
			},
			"union": {
				"prefix": "union",
				"body": [
					"union ${MyUnion}",
					"{",
					"$1",
					"};"
				],
				"description": "Code snippet for union"
			},
			"cout": {
				"prefix": "cout",
				"body": [
					"std::cout << \"${1:/* message */}\" << std::endl;"
				],
				"description": "Code snippet for printing to std::cout, provided the header is set"
			},
			"#inc": {
				"prefix": "#inc",
				"body": [
					"#include \"$1\""
				],
				"description": "Code snippet for #include \" \""
			},
			"#inc<": {
				"prefix": "#inc<",
				"body": [
					"#include <$1>"
				],
				"description": "Code snippet for #include \" \""
			},
			"#def": {
				"prefix": "#def",
				"body": [
					"#define \"$1\" \"$2\" "
					],
				"description": "Code snippet for #define \" \""
			},
			"main": {
				"prefix": "main",
				"body": [
					"int main(int argc, const char** argv) {",
					"    return 0;",
					"}"
				],
				"description": "Code snippet for main function"
			}
}
